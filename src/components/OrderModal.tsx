import React, { FunctionComponent, useState, useCallback } from "react";
import styles from "../styles/OrderModal.module.css";
import { sendTelegramMessage } from "../services/telegram";
import { useCart, CartItem as CartItemType } from "../contexts/CartContext";

interface OrderModalProps {
  onClose: () => void;
}

const OrderModal: FunctionComponent<OrderModalProps> = ({ onClose }) => {
  // –î–æ—Å—Ç–∞—ë–º –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∫–æ—Ä–∑–∏–Ω—ã –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –∏ –æ–±—â—É—é —Å—É–º–º—É
  const { items, totalSum, clearCart } = useCart();

  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–ª–µ–π –∑–∞–∫–∞–∑–∞
  const [lastName, setLastName] = useState("");
  const [firstName, setFirstName] = useState("");
  const [patronymic, setPatronymic] = useState("");
  const [address, setAddress] = useState("");
  const [phone, setPhone] = useState("");
  const [paymentMethod, setPaymentMethod] = useState<"cash" | "card">("cash");
  const [error, setError] = useState<string | null>(null);
  const [loading, setLoading] = useState(false);

  const handleSubmit = useCallback(
    async (e: React.FormEvent) => {
      e.preventDefault();
      setError(null);

      // –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
      if (!lastName || !firstName || !address || !phone) {
        setError("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è.");
        return;
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (HTML) —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–∫–∞–∑–∞
      const customerInfo = `
<b>üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –∏–∑ StreetBook</b>
<b>–§–∞–º–∏–ª–∏—è:</b> ${lastName}
<b>–ò–º—è:</b> ${firstName}
<b>–û—Ç—á–µ—Å—Ç–≤–æ:</b> ${patronymic || "(–Ω–µ —É–∫–∞–∑–∞–Ω–æ)"}
<b>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</b> ${address}
<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${phone}
<b>–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</b> ${paymentMethod === "cash" ? "–ù–∞–ª–∏—á–Ω—ã–º–∏" : "–ö–∞—Ä—Ç–æ–π"}
<b>‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ</b>
`;

      // –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
      let itemsText = `<b>üìö –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:</b>\n`;
      items.forEach((item: CartItemType, idx: number) => {
        const lineTotal = item.price * item.quantity;
        itemsText += `
${idx + 1}. <b>${item.title}</b>
    –ê–≤—Ç–æ—Ä: ${item.author}
    –¶–µ–Ω–∞ –∑–∞ —à—Ç.: ${item.price} ‚ÇΩ
    –ö–æ–ª-–≤–æ: ${item.quantity}
    –°—É–º–º–∞: ${lineTotal} ‚ÇΩ
`;
      });

      // –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞
      const footer = `\n<b>‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ</b>
<b>–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞:</b> ${totalSum} ‚ÇΩ
`;

      const fullMessage = customerInfo + itemsText + footer;

      try {
        setLoading(true);
        await sendTelegramMessage(fullMessage);
        alert("–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É.");
        clearCart();
        onClose();
      } catch (err: any) {
        console.error("Telegram send error:", err);
        setError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
      } finally {
        setLoading(false);
      }
    },
    [
      lastName,
      firstName,
      patronymic,
      address,
      phone,
      paymentMethod,
      items,
      totalSum,
      clearCart,
      onClose,
    ]
  );

  return (
    <div className={styles.modalOverlay}>
      <div className={styles.modalBox}>
        <button className={styles.closeButton} onClick={onClose}>
          &times;
        </button>
        <h2 className={styles.title}>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</h2>

        {error && <div className={styles.error}>{error}</div>}

        <form onSubmit={handleSubmit} className={styles.form}>
          {/* –§–∞–º–∏–ª–∏—è */}
          <div className={styles.field}>
            <label htmlFor="lastName" className={styles.label}>
              –§–∞–º–∏–ª–∏—è *
            </label>
            <input
              id="lastName"
              type="text"
              className={styles.input}
              value={lastName}
              onChange={(e) => setLastName(e.target.value)}
              required
            />
          </div>

          {/* –ò–º—è */}
          <div className={styles.field}>
            <label htmlFor="firstName" className={styles.label}>
              –ò–º—è *
            </label>
            <input
              id="firstName"
              type="text"
              className={styles.input}
              value={firstName}
              onChange={(e) => setFirstName(e.target.value)}
              required
            />
          </div>

          {/* –û—Ç—á–µ—Å—Ç–≤–æ */}
          <div className={styles.field}>
            <label htmlFor="patronymic" className={styles.label}>
              –û—Ç—á–µ—Å—Ç–≤–æ
            </label>
            <input
              id="patronymic"
              type="text"
              className={styles.input}
              value={patronymic}
              onChange={(e) => setPatronymic(e.target.value)}
            />
          </div>

          {/* –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ */}
          <div className={styles.field}>
            <label htmlFor="address" className={styles.label}>
              –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ *
            </label>
            <input
              id="address"
              type="text"
              className={styles.input}
              value={address}
              onChange={(e) => setAddress(e.target.value)}
              required
            />
          </div>

          {/* –¢–µ–ª–µ—Ñ–æ–Ω */}
          <div className={styles.field}>
            <label htmlFor="phone" className={styles.label}>
              –¢–µ–ª–µ—Ñ–æ–Ω *
            </label>
            <input
              id="phone"
              type="tel"
              className={styles.input}
              value={phone}
              onChange={(e) => setPhone(e.target.value)}
              required
            />
          </div>

          {/* –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã */}
          <div className={styles.field}>
            <label className={styles.label}>–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã</label>
            <select
              className={styles.input}
              value={paymentMethod}
              onChange={(e) =>
                setPaymentMethod(e.target.value as "cash" | "card")
              }
            >
              <option value="cash">–ù–∞–ª–∏—á–Ω—ã–º–∏</option>
              <option value="card" disabled>
                –ë–µ–∑–Ω–∞–ª–∏—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç (–≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)
              </option>
            </select>
          </div>

          {/* –ö–Ω–æ–ø–∫–∞ ¬´–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑¬ª */}
          <button
            type="submit"
            className={styles.submitButton}
            disabled={loading}
          >
            {loading ? "–û—Ç–ø—Ä–∞–≤–∫–∞..." : "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑"}
          </button>
        </form>
      </div>
    </div>
  );
};

export default OrderModal;
