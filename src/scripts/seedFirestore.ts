// src/scripts/seedFirestore.ts
import { readFileSync } from "fs";
import { dirname, join } from "path";
import { fileURLToPath } from "url";
import admin from "firebase-admin";

// 1) __dirname –≤ ESM    
const __dirname = dirname(fileURLToPath(import.meta.url));

// 2) –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø–∞—Ä—Å–∏–Ω–≥ JSON —Å –ø–æ–Ω—è—Ç–Ω—ã–º–∏ –æ—à–∏–±–∫–∞–º–∏
function loadJson<T = any>(relativePath: string): T {
  const abs = join(__dirname, "..", "..", relativePath);
  let data: string;
  try {
    data = readFileSync(abs, "utf-8");
  } catch (err: any) {
    throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å "${relativePath}": ${err.message}`);
  }
  try {
    return JSON.parse(data);
  } catch (err: any) {
    throw new Error(`–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –≤ "${relativePath}": ${err.message}`);
  }
}

// 3) –¢–∏–ø –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –æ–¥–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
interface Card {
  id: number;
  image: string;
  title: string;
  author: string;
  price: string;
}
function validateCard(obj: any, idx: number): Card {
  if (typeof obj !== "object" || obj === null) {
    throw new Error(`–ó–∞–ø–∏—Å—å[${idx}] –Ω–µ –æ–±—ä–µ–∫—Ç.`);
  }
  if (typeof obj.id !== "number") {
    throw new Error(`–ó–∞–ø–∏—Å—å[${idx}].id –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.`);
  }
  for (const key of ["image", "title", "author", "price"] as const) {
    if (typeof obj[key] !== "string" || !obj[key].trim()) {
      throw new Error(`–ó–∞–ø–∏—Å—å[${idx}].${key} –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ–ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π.`);
    }
  }
  return obj;
}

// 4) –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è seeder
async function main() {
  console.log("üü¢ –°—Ç–∞—Ä—Ç seedFirestore.ts");

  // 4.1) –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª—é—á —Å–µ—Ä–≤–∏—Å-–∞–∫–∫–∞—É–Ω—Ç–∞
  let svc: any;
  try {
    svc = loadJson("serviceAccountKey.json");
    console.log("‚úî serviceAccountKey.json –∑–∞–≥—Ä—É–∂–µ–Ω");
  } catch (err: any) {
    console.error("‚ùå", err.message);
    process.exit(1);
  }

  // 4.2) –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Admin SDK
  try {
    admin.initializeApp({
      credential: admin.credential.cert(svc),
    });
    console.log("‚úî Firebase Admin initialized");
  } catch (err: any) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Firebase:", err.message);
    process.exit(1);
  }

  const db = admin.firestore();

  // 4.3) –ï—Å–ª–∏ –≤—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π —ç–º—É–ª—è—Ç–æ—Ä:
  if (process.env.NODE_ENV === "development") {
    db.settings({ host: "localhost:8080", ssl: false });
    console.log("‚ÑπÔ∏è –ü–∏—à–µ–º –≤ —ç–º—É–ª—è—Ç–æ—Ä Firestore (localhost:8080)");
  } else {
    console.log("‚ÑπÔ∏è –ü–∏—à–µ–º –≤ PRODUCTION Firestore");
  }

  // 4.4) –ó–∞–≥—Ä—É–∂–∞–µ–º cards.json ‚Äî –º–æ–∂–µ—Ç –±—ã—Ç—å –º–∞—Å—Å–∏–≤ –∏–ª–∏ –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª—è–º–∏
  let raw: any;
  try {
    raw = loadJson("cards.json");
    console.log("‚úî cards.json –∑–∞–≥—Ä—É–∂–µ–Ω");
  } catch (err: any) {
    console.error("‚ùå", err.message);
    process.exit(1);
  }

  // 4.5) –°–æ–±–∏—Ä–∞–µ–º –µ–¥–∏–Ω—ã–π –º–∞—Å—Å–∏–≤ –∫–∞—Ä—Ç–æ—á–µ–∫
  let flat: any[] = [];
  if (Array.isArray(raw)) {
    flat = raw;
  } else if (typeof raw === "object" && raw !== null) {
    for (const key of Object.keys(raw)) {
      if (Array.isArray(raw[key])) {
        flat.push(...raw[key]);
      } else {
        console.warn(`‚ö†Ô∏è –í cards.json –ø–æ–ª–µ "${key}" –Ω–µ –º–∞—Å—Å–∏–≤ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
      }
    }
  } else {
    console.error("‚ùå cards.json –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º –∏–ª–∏ –æ–±—ä–µ–∫—Ç–æ–º —Å –º–∞—Å—Å–∏–≤–∞–º–∏");
    process.exit(1);
  }
  console.log(`‚ÑπÔ∏è –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫: ${flat.length}`);

  // 4.6) –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –∑–∞–ø–∏—Å—å
  for (let i = 0; i < flat.length; i++) {
    let card: Card;
    try {
      card = validateCard(flat[i], i);
    } catch (err: any) {
      console.error(`‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–ø–∏—Å–∏[${i}] –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å:`, err.message);
      continue;
    }

    try {
      await db.collection("products").doc(String(card.id)).set(card);
      console.log(`‚úÖ –ó–∞–ø–∏—Å–∞–Ω product/${card.id}`);
    } catch (err: any) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ product/${card.id}:`, err.message);
    }
  }

  console.log("üéâ –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã");
}

main().catch((err) => {
  console.error("FATAL:", err);
  process.exit(1);
});
